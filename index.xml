<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IO01 Blog</title>
    <link>/</link>
    <description>Recent content on IO01 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; {year} &lt;a href=&#34;https://blog.io01.xyz/&#34;&gt;IO01&lt;/a&gt;
</copyright>
    <lastBuildDate>Fri, 18 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>遵循 Google 应用指南的 Retrofit &#43; Coroutine 封装</title>
      <link>/posts/%E9%81%B5%E5%BE%AA-google-%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97%E7%9A%84-retrofit-&#43;-coroutine-%E5%B0%81%E8%A3%85/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E9%81%B5%E5%BE%AA-google-%E5%BA%94%E7%94%A8%E6%8C%87%E5%8D%97%E7%9A%84-retrofit-&#43;-coroutine-%E5%B0%81%E8%A3%85/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Retrofit 从 2.6.0 以后对 Kotlin 协程提供了原生支持，使得异步请求从写法上更像同步调用，配合 Google 出的 Jetpack 全家桶可以使得网络请求更加优雅简单，而且可以完全遵循 Google 给出的应用架构指南。&lt;/p&gt;
&lt;p&gt;另外我们有一个更加多样的需求：我们的应用使用了多套服务接口，每套接口返回的参数模板不同，baseUrl 则更多样化，因此带来了更复杂的封装逻辑。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>时间格式化的趣事：YYYY 示年</title>
      <link>/posts/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%9A%84%E8%B6%A3%E4%BA%8Byyyy%E7%A4%BA%E5%B9%B4/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%9A%84%E8%B6%A3%E4%BA%8Byyyy%E7%A4%BA%E5%B9%B4/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;2019 年 12 月 29 到 31 日在格式化时间时出现了一个有趣的小 bug：比如 2019 年 12 月 31 日时间戳有可能会被格式化成：2020-12-31。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MD5 计算前导 0 丢失问题</title>
      <link>/posts/md5%E8%AE%A1%E7%AE%97%E5%89%8D%E5%AF%BC0%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/md5%E8%AE%A1%E7%AE%97%E5%89%8D%E5%AF%BC0%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h2 id=&#34;现象&#34;&gt;现象&lt;/h2&gt;
&lt;p&gt;我们使用 Java 生成 MD5 时常用的写法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private static String md5(String data) throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance(&amp;quot;MD5&amp;quot;);
    md.update(data.getBytes());
    return new BigInteger(1, md.digest()).toString(16);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果计算 &lt;code&gt;a&lt;/code&gt; 的 MD5 会发现结果为 &lt;code&gt;cc175b9c0f1b6a831c399e269772661&lt;/code&gt;，只有 31 位，正确的值应该是 &lt;code&gt;0cc175b9c0f1b6a831c399e269772661&lt;/code&gt;，仔细观察可以发现我们的计算方法把第一位 &lt;code&gt;0&lt;/code&gt; 丢失了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从阿里规约谈起-包装类的值比较注意事项</title>
      <link>/posts/%E4%BB%8E%E9%98%BF%E9%87%8C%E8%A7%84%E7%BA%A6%E8%B0%88%E8%B5%B7-%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E5%80%BC%E6%AF%94%E8%BE%83%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BB%8E%E9%98%BF%E9%87%8C%E8%A7%84%E7%BA%A6%E8%B0%88%E8%B5%B7-%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E5%80%BC%E6%AF%94%E8%BE%83%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;int&lt;/code&gt;、&lt;code&gt;long&lt;/code&gt; 等基本数据类型值比较可以直接使用 &lt;code&gt;==&lt;/code&gt; 比较，其包装类型：&lt;code&gt;Integer&lt;/code&gt;、&lt;code&gt;Long&lt;/code&gt; 如果直接使用 &lt;code&gt;==&lt;/code&gt; 比较大小我们会发现一个神奇的现象。当然，阿里规约也对此做出强制规定：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;【强制】&lt;/strong&gt; 所有的相同类型的包装类对象之间值的比较，全部使用 &lt;code&gt;equals&lt;/code&gt; 方法比较。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>有趣的算法-布隆过滤器</title>
      <link>/posts/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%AE%97%E6%B3%95-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%AE%97%E6%B3%95-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;现在假设一个需求：设计一个url黑名单系统，需求是1亿个url黑名单，每个url平均长度30字节，判断当前的url是否在黑名单中。&lt;/p&gt;
&lt;p&gt;我们最先想到的可能时HashSet，如果少量的url，HashSet有着O(1)的查询效率是首选的方案。但是面对1亿个url，单单存储value就需要2861MB内存，显然不可取。而如果放到硬盘上进行数据库查询，面对近3GB的数据库，每次匹配都要查询的话，IO操作本身就是瓶颈。&lt;/p&gt;
&lt;p&gt;所以这时候引入了布隆过滤器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从阿里规约谈起-Arrays.asList 三坑</title>
      <link>/posts/%E4%BB%8E%E9%98%BF%E9%87%8C%E8%A7%84%E7%BA%A6%E8%B0%88%E8%B5%B7-arrays.aslist%E4%B8%89%E5%9D%91/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BB%8E%E9%98%BF%E9%87%8C%E8%A7%84%E7%BA%A6%E8%B0%88%E8%B5%B7-arrays.aslist%E4%B8%89%E5%9D%91/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;将数组转换成 List 是日常开发十分常见的操作，对此 JDK 提供了一个非常好用的工具类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List list = Arrays.asList(array);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是如果操纵 List 的内容的话，阿里规约会给出一个提示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.fori.fun/blog/posts/img/p3c_aslist_error.png&#34; alt=&#34;使用 asList 的问题&#34;&gt;&lt;/p&gt;
&lt;p&gt;于是深入看了下，发现 &lt;code&gt;Arrays.asList&lt;/code&gt; 有三个日常开发中容易坑人的地方。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从阿里规约谈起-HashMap 初始化和扩容相关</title>
      <link>/posts/%E4%BB%8E%E9%98%BF%E9%87%8C%E8%A7%84%E7%BA%A6%E8%B0%88%E8%B5%B7-hashmap%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%89%A9%E5%AE%B9%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BB%8E%E9%98%BF%E9%87%8C%E8%A7%84%E7%BA%A6%E8%B0%88%E8%B5%B7-hashmap%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%89%A9%E5%AE%B9%E7%9B%B8%E5%85%B3/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;日常开发中使用 HashMap 方法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Map&amp;lt;String, Object&amp;gt; HashMap = new HashMap&amp;lt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是阿里规约会提示有问题：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.fori.fun/blog/posts/img/p3c_hashmap_error.png&#34; alt=&#34;未指定初始化容量&#34;&gt;&lt;/p&gt;
&lt;p&gt;由此我们可以看一下 HashMap 初始化和扩容相关。&lt;/p&gt;
&lt;p&gt;注：本文涉及了少许 HashMap 基础，由于与主线无关，不详讲。源码均加了些注释，注释无法解释清楚的地方放在源码之后论述。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从阿里规约谈起-禁用 Executors 创建线程池</title>
      <link>/posts/%E4%BB%8E%E9%98%BF%E9%87%8C%E8%A7%84%E7%BA%A6%E8%B0%88%E8%B5%B7-%E7%A6%81%E7%94%A8executors%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E4%BB%8E%E9%98%BF%E9%87%8C%E8%A7%84%E7%BA%A6%E8%B0%88%E8%B5%B7-%E7%A6%81%E7%94%A8executors%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;Android 开发中耗时任务应该放在子线程中进行，否则会阻塞 UI 造成 ANR。但是如果直接创建子线程，阿里规约会提示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://static.fori.fun/blog/posts/img/p3c_new_thread_error.png&#34; alt=&#34;直接使用子线程报错&#34;&gt;&lt;/p&gt;
&lt;p&gt;关于禁止直接创建线程的原因如图，不再赘述。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>/posts/%E6%B7%B1%E5%85%A5%E6%BA%90%E7%A0%81%E6%8E%92%E6%9F%A5-flag_activity_new_task-%E5%AF%BC%E8%87%B4%E7%9A%84-activity-%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/%E6%B7%B1%E5%85%A5%E6%BA%90%E7%A0%81%E6%8E%92%E6%9F%A5-flag_activity_new_task-%E5%AF%BC%E8%87%B4%E7%9A%84-activity-%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8/</guid>
      <description>深入源码排查 FLAG_ACTIVITY_NEW_TASK 导致的 Activity 无法正常启动 引言 众所周知 Android 中 Activity 有四种启动模式，决定了是否创建新的 Activity 实例或复用当前实例。但是实际上 Activity 的启动十分复杂，不单单是 android:launchMode 就能</description>
    </item>
    
  </channel>
</rss>
