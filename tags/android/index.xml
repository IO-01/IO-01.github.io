<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android on IO01 Blog</title><link>https://blog.io01.xyz/tags/android/</link><description>Recent content in Android on IO01 Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 06 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.io01.xyz/tags/android/index.xml" rel="self" type="application/rss+xml"/><item><title>子线程更新 UI 全解</title><link>https://blog.io01.xyz/posts/9qg5/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>https://blog.io01.xyz/posts/9qg5/</guid><description>&lt;h2 id="子线程更新-ui-异常设计理念及简单源码解析">子线程更新 UI 异常设计理念及简单源码解析&lt;/h2>
&lt;p>初学者可能会犯在子线程更新 UI 的错误，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>thread { imageView.setBackgroundColor(&lt;span style="color:#50fa7b">Color&lt;/span>.RED) }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一旦运行，应用会直接崩溃并抛出异常，这也是我们 Android 开发的一条铁律：&lt;em>在子线程中不能更新 UI&lt;/em>。&lt;/p>
&lt;p>那么为什么 Android 不让子线程更新 UI 呢？原因在于现在屏幕刷新率最低是 60Hz，意味着最多每 16ms 就会刷新一次屏幕，所以 UI 更新要尽可能快速，否则会丢帧导致卡顿。那么 UI 更新操作就不能加锁，频繁的加锁释放锁可能会延长 UI 渲染时间，但是不加锁如果允许子线程更新 UI 会导致多个线程对 UI 同时更新，造成线程不安全而导致 UI 最终效果无法想象，所以 Android 直接限制了子线程更新 UI，实际上不只是 Android 有这种限制，常见的 UI 框架基本都是单线程模型。&lt;/p></description></item><item><title>遵循 Google 应用指南的 Retrofit + Coroutine 封装</title><link>https://blog.io01.xyz/posts/2aa2/</link><pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.io01.xyz/posts/2aa2/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Retrofit 从 2.6.0 以后对 Kotlin 协程提供了原生支持，使得异步请求从写法上更像同步调用，配合 Google 出的 Jetpack 全家桶可以使得网络请求更加优雅简单，而且可以完全遵循 Google 给出的应用架构指南。&lt;/p>
&lt;p>另外我们有一个更加多样的需求：我们的应用使用了多套服务接口，每套接口返回的参数模板不同，baseUrl 则更多样化，因此带来了更复杂的封装逻辑。&lt;/p></description></item></channel></rss>