<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>源码 on IO01 Blog</title><link>https://blog.io01.xyz/tags/%E6%BA%90%E7%A0%81/</link><description>Recent content in 源码 on IO01 Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.io01.xyz/tags/%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>从源码解析一个 SparseArray 线程不安全的崩溃</title><link>https://blog.io01.xyz/posts/2e2d/</link><pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.io01.xyz/posts/2e2d/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>工作中遇到一个崩溃，将无关逻辑去掉，最后的崩溃部分是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">if&lt;/span> &lt;span style="color:#ff79c6">(&lt;/span>sparseArray&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">null&lt;/span>&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#ff79c6">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> Log&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">i&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;SparseArray&amp;#34;&lt;/span>&lt;span style="color:#ff79c6">,&lt;/span> sparseArray&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">get&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>&lt;span style="color:#ff79c6">).&lt;/span>&lt;span style="color:#50fa7b">toString&lt;/span>&lt;span style="color:#ff79c6">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#ff79c6">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>抛出的异常是空指针：&lt;code>java.lang.NullPointerException&lt;/code>，其实根据经验也知道是线程安全问题，但是排查的过程中却越来越觉得我们的应用场景中不应该出现 null 的存在。&lt;/p></description></item><item><title>子线程更新 UI 全解</title><link>https://blog.io01.xyz/posts/9qg5/</link><pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate><guid>https://blog.io01.xyz/posts/9qg5/</guid><description>&lt;h2 id="子线程更新-ui-异常设计理念及简单源码解析">子线程更新 UI 异常设计理念及简单源码解析&lt;/h2>
&lt;p>初学者可能会犯在子线程更新 UI 的错误，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>thread { imageView.setBackgroundColor(&lt;span style="color:#50fa7b">Color&lt;/span>.RED) }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一旦运行，应用会直接崩溃并抛出异常，这也是我们 Android 开发的一条铁律：&lt;em>在子线程中不能更新 UI&lt;/em>。&lt;/p>
&lt;p>那么为什么 Android 不让子线程更新 UI 呢？原因在于现在屏幕刷新率最低是 60Hz，意味着最多每 16ms 就会刷新一次屏幕，所以 UI 更新要尽可能快速，否则会丢帧导致卡顿。那么 UI 更新操作就不能加锁，频繁的加锁释放锁可能会延长 UI 渲染时间，但是不加锁如果允许子线程更新 UI 会导致多个线程对 UI 同时更新，造成线程不安全而导致 UI 最终效果无法想象，所以 Android 直接限制了子线程更新 UI，实际上不只是 Android 有这种限制，常见的 UI 框架基本都是单线程模型。&lt;/p></description></item><item><title>深入源码排查 FLAG_ACTIVITY_NEW_TASK 导致的 Activity 无法正常启动</title><link>https://blog.io01.xyz/posts/6fn7/</link><pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate><guid>https://blog.io01.xyz/posts/6fn7/</guid><description>&lt;h2 id="引言">引言&lt;/h2>
&lt;p>众所周知 Android 中 Activity 有四种启动模式，决定了是否创建新的 Activity 实例或复用当前实例。但是实际上 Activity 的启动十分复杂，不单单是 &lt;code>android:launchMode&lt;/code> 就能决定的，多个 Intent Flag 都能改变启动的行为模式，除此之外还会根据 &lt;code>android:taskAffinity&lt;/code> 的值来判断对应任务栈是否存在。&lt;/p></description></item><item><title>从阿里规约谈起 - 包装类的值比较注意事项</title><link>https://blog.io01.xyz/posts/57fb/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate><guid>https://blog.io01.xyz/posts/57fb/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;code>int&lt;/code>、&lt;code>long&lt;/code> 等基本数据类型值比较可以直接使用 &lt;code>==&lt;/code> 比较，其包装类型：&lt;code>Integer&lt;/code>、&lt;code>Long&lt;/code> 如果直接使用 &lt;code>==&lt;/code> 比较大小我们会发现一个神奇的现象。当然，阿里规约也对此做出强制规定：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>【强制】&lt;/strong> 所有的相同类型的包装类对象之间值的比较，全部使用 &lt;code>equals&lt;/code> 方法比较。&lt;/p>
&lt;/blockquote></description></item><item><title>从阿里规约谈起 - Arrays.asList 三坑</title><link>https://blog.io01.xyz/posts/23af/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid>https://blog.io01.xyz/posts/23af/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>将数组转换成 List 是日常开发十分常见的操作，对此 JDK 提供了一个非常好用的工具类：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>List list &lt;span style="color:#ff79c6">=&lt;/span> Arrays&lt;span style="color:#ff79c6">.&lt;/span>&lt;span style="color:#50fa7b">asList&lt;/span>&lt;span style="color:#ff79c6">(&lt;/span>array&lt;span style="color:#ff79c6">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是如果操纵 List 的内容的话，阿里规约会给出一个提示：&lt;/p>
&lt;p>
&lt;img alt="使用 asList 的问题" title="" src="https://static.fori.fun/blog/posts/static/p3c_aslist_error.png" />&lt;/p>
&lt;p>于是深入看了下，发现 &lt;code>Arrays.asList&lt;/code> 有三个日常开发中容易坑人的地方。&lt;/p></description></item><item><title>从阿里规约谈起 - HashMap 初始化和扩容相关</title><link>https://blog.io01.xyz/posts/6tf9/</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.io01.xyz/posts/6tf9/</guid><description>&lt;h2 id="引言">引言&lt;/h2>
&lt;p>日常开发中使用 HashMap 方法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>Map&lt;span style="color:#ff79c6">&amp;lt;&lt;/span>String&lt;span style="color:#ff79c6">,&lt;/span> Object&lt;span style="color:#ff79c6">&amp;gt;&lt;/span> HashMap &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> HashMap&lt;span style="color:#ff79c6">&amp;lt;&amp;gt;();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是阿里规约会提示有问题：&lt;/p>
&lt;p>
&lt;img alt="未指定初始化容量" title="" src="https://static.fori.fun/blog/posts/static/p3c_hashmap_error.png" />&lt;/p>
&lt;p>由此我们可以看一下 HashMap 初始化和扩容相关。&lt;/p>
&lt;p>注：本文涉及了少许 HashMap 基础，由于与主线无关，不详讲。源码均加了些注释，注释无法解释清楚的地方放在源码之后论述。&lt;/p></description></item><item><title>从阿里规约谈起 - 禁用 Executors 创建线程池</title><link>https://blog.io01.xyz/posts/28aj/</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><guid>https://blog.io01.xyz/posts/28aj/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Android 开发中耗时任务应该放在子线程中进行，否则会阻塞 UI 造成 ANR。但是如果直接创建子线程，阿里规约会提示：&lt;/p>
&lt;p>
&lt;img alt="直接使用子线程报错" title="" src="https://static.fori.fun/blog/posts/static/p3c_new_thread_error.png" />&lt;/p>
&lt;p>关于禁止直接创建线程的原因如图，不再赘述。&lt;/p></description></item></channel></rss>