<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>杂项 on IO01 Blog</title><link>/tags/%E6%9D%82%E9%A1%B9/</link><description>Recent content in 杂项 on IO01 Blog</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; {year} &lt;a href="https://blog.io01.xyz/">IO01&lt;/a></copyright><lastBuildDate>Mon, 29 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/%E6%9D%82%E9%A1%B9/index.xml" rel="self" type="application/rss+xml"/><item><title>使用阿里云效同步 Git 仓库到 Github</title><link>/posts/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%95%88%E5%90%8C%E6%AD%A5git%E4%BB%93%E5%BA%93%E5%88%B0github/</link><pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate><guid>/posts/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%95%88%E5%90%8C%E6%AD%A5git%E4%BB%93%E5%BA%93%E5%88%B0github/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>有时 Github 网络的不稳定性实在令人头痛，push 总是失败，而且需要把主仓库放在 Github 而非 Gitee 等国内平台，虽然可以通过配置代理进行，不过也可以曲线救国，选择通过 push 到国内代码管理平台，然后通过 CI 平台自动推送到 Github。&lt;/p>
&lt;p>阿里云效综合了代码仓库和 CI 平台，私有代码仓库免费，免费构建时间足够支撑我们这点小事，并且执行环境可以选香港保证了能 push 到 GitHub，所以选择了阿里云效。&lt;/p>
&lt;p>理论上所有能通过 &lt;code>git push&lt;/code> 触发 CI（CI 的基本操作了）并且基础环境存在 &lt;code>git&lt;/code> 而且网络良好的平台都可以按照本文方法进行，甚至有更简单的比如 Gitlab 直接支持推送到 Github，至于本文为何没有选用 Gitlab，纯属个人偏好。&lt;/p></description></item><item><title>有趣的算法-布隆过滤器</title><link>/posts/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%AE%97%E6%B3%95-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</link><pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate><guid>/posts/%E6%9C%89%E8%B6%A3%E7%9A%84%E7%AE%97%E6%B3%95-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</guid><description>&lt;h2 id="引言">引言&lt;/h2>
&lt;p>现在假设一个需求：设计一个 url 黑名单系统，需求是 1 亿个 url 黑名单，每个 url 平均长度 30 字节，判断当前的 url 是否在黑名单中。&lt;/p>
&lt;p>我们最先想到的可能时 HashSet，如果少量的 url，HashSet 有着 O(1) 的查询效率是首选的方案。但是面对 1 亿个 url，单单存储 value 就需要 2861MB 内存，显然不可取。而如果放到硬盘上进行数据库查询，面对近 3GB 的数据库，每次匹配都要查询的话，IO 操作本身就是瓶颈。&lt;/p>
&lt;p>所以这时候引入了布隆过滤器。&lt;/p></description></item></channel></rss>